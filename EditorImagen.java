/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package interfaz.imagen;

import java.awt.BasicStroke;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Line2D;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import javax.imageio.ImageIO;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author alemigdiez
 */
public class EditorImagen extends javax.swing.JFrame {

    // Esta es la imagen actual que se despliega en el label
    private ImageIcon currentImage;

    private BufferedImage image;
    
    // Este booleano es para llevar el contol de los cambios, para el botón de escalar
    // Se establece en true al usar Guardar y Guardar como, y en false en los métodos de dibujo
    private boolean guardado = false;

    // El archivo correspondiente a dicha imagen
    // imgFile se inicializa cuando se abre una imagen y cuando se "guarda como"
    // El método guardar guarda la imagen obtenida del label en imgFile
    // Al inicio, no existe imgFile ya que, aunque label sí tenga una imagen, esta no se ha almacenado en memoria, por lo que no existe
    private File imgFile;

    // Este es el punto actual donde pasa el mouse para dibujar con el pincel
    private Point prevPoint;

    // Coordenadas iniciales de la línea.
    private int x1, y1;

    // Para evitar conflictos con el mouse listener de las herramientas
    private MouseAdapter currentMouseListener;

    // Medidas del lienzo
    private final int anchoLienzo = 1200;
    private final int altoLienzo = 650;

    // Estos son constantes para los métodos de dibujo
    private final int anchoPincel = 5;
    private final Color colorPincel = Color.RED;

    private final int anchoLinea = 3;
    private final Color colorLinea = Color.yellow;

    private final int anchoRect = 3;
    private final Color colorRect = Color.BLUE;

    private final int anchoCirc = 4;
    private final Color colorCirc = Color.BLACK;

    // Se harán listas que contendrán los trazos de todas las figuras
    // Cuando el método correspondiente trace una nueva figura en la imagen, dicho trazo se añadirá a la lista correspondiente
    // Son arreglos dinámicos que contienen elementos del tipo de las figuras
    private ArrayList<Line2D> lines = new ArrayList<>();
    private ArrayList<Line2D> rectas = new ArrayList<>();
    private ArrayList<Rectangle> rectangulos = new ArrayList<>();
    private ArrayList<Ellipse2D> elipses = new ArrayList<>();

    /**
     * Creates new form EditorImagen
     */
    public EditorImagen() {
        initComponents();
        setLayout(new BorderLayout());

        Color c = new Color(244, 250, 255);
        getContentPane().setBackground(c); // Establecemos el color de fondo del JFrame

        setTitle("File 8 Image Editor"); // Establecemos el título de la ventana
        setLocationRelativeTo(null); // Centramos la ventana
        setResizable(false); // Establecemos que la ventana no se pueda cambiar de tamaño
        setExtendedState(JFrame.MAXIMIZED_BOTH); // La ventana ocupa todo el tamaño de la pantalla

        // Hacemos que el JLabel "labelImage" sea blanco
        labelImage.setOpaque(true);
        labelImage.setBackground(Color.WHITE);
        labelImage.setSize(anchoLienzo, altoLienzo);

        // Al inicio, el label tendrá de ícono un fondo blanco y currentImage es dicha imagen
        labelImage.setIcon(new ImageIcon(getClass().getResource("/iconos/white_cover.jpg")));
        currentImage = (ImageIcon) labelImage.getIcon();

        // Tenemos que reescalar la imagen al ancho y alto del label, ya que la imagen original es de 1920*1080
        // Se podría cambiar dicha imagen tal cual, pero lo haremos manualmente
        // Es algo redundante, pero funciona
        Image img = currentImage.getImage().getScaledInstance(labelImage.getWidth(), labelImage.getHeight(), Image.SCALE_SMOOTH);
        // Asignamos la imagen al label
        labelImage.setIcon(new ImageIcon(img));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        labelImage = new javax.swing.JLabel();
        panelHerramientas = new javax.swing.JPanel();
        btnEscalar = new javax.swing.JButton();
        btnPintar = new javax.swing.JButton();
        btnLinea = new javax.swing.JButton();
        btnRectangulo = new javax.swing.JButton();
        btnCirculo = new javax.swing.JButton();
        btnBorrar = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        menuArchivo = new javax.swing.JMenu();
        menuItemNuevo = new javax.swing.JMenuItem();
        menuItemAbrir = new javax.swing.JMenuItem();
        menuItemGuardar = new javax.swing.JMenuItem();
        menuItemGuardarComo = new javax.swing.JMenuItem();
        menuItemSalir = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        labelImage.setBackground(new java.awt.Color(255, 255, 254));
        labelImage.setForeground(new java.awt.Color(255, 255, 255));
        labelImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/white_cover.jpg"))); // NOI18N
        labelImage.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        labelImage.setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));

        panelHerramientas.setBackground(new java.awt.Color(244, 250, 255));

        btnEscalar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/escalar.jpg"))); // NOI18N
        btnEscalar.setToolTipText("");
        btnEscalar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEscalarActionPerformed(evt);
            }
        });

        btnPintar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/paint_brush_icon.png"))); // NOI18N
        btnPintar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPintarActionPerformed(evt);
            }
        });

        btnLinea.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/icono_linea.png"))); // NOI18N
        btnLinea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLineaActionPerformed(evt);
            }
        });

        btnRectangulo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rectangulo.png"))); // NOI18N
        btnRectangulo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRectanguloActionPerformed(evt);
            }
        });

        btnCirculo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/circulo.png"))); // NOI18N
        btnCirculo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCirculoActionPerformed(evt);
            }
        });

        btnBorrar.setBackground(new java.awt.Color(0, 0, 0));
        btnBorrar.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        btnBorrar.setForeground(new java.awt.Color(255, 255, 255));
        btnBorrar.setText("Borrar");
        btnBorrar.setBorderPainted(false);
        btnBorrar.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btnBorrar.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnBorrar.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        btnBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBorrarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelHerramientasLayout = new javax.swing.GroupLayout(panelHerramientas);
        panelHerramientas.setLayout(panelHerramientasLayout);
        panelHerramientasLayout.setHorizontalGroup(
            panelHerramientasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelHerramientasLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelHerramientasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnEscalar)
                    .addComponent(btnPintar)
                    .addComponent(btnLinea)
                    .addComponent(btnRectangulo)
                    .addComponent(btnCirculo)
                    .addComponent(btnBorrar))
                .addContainerGap(9, Short.MAX_VALUE))
        );
        panelHerramientasLayout.setVerticalGroup(
            panelHerramientasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelHerramientasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnEscalar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnPintar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnLinea)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnRectangulo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCirculo)
                .addGap(46, 46, 46)
                .addComponent(btnBorrar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        menuArchivo.setText("Archivo");

        menuItemNuevo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        menuItemNuevo.setText("Nuevo");
        menuItemNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemNuevoActionPerformed(evt);
            }
        });
        menuArchivo.add(menuItemNuevo);

        menuItemAbrir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        menuItemAbrir.setText("Abrir");
        menuItemAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemAbrirActionPerformed(evt);
            }
        });
        menuArchivo.add(menuItemAbrir);

        menuItemGuardar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        menuItemGuardar.setText("Guardar");
        menuItemGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemGuardarActionPerformed(evt);
            }
        });
        menuArchivo.add(menuItemGuardar);

        menuItemGuardarComo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
        menuItemGuardarComo.setText("Guardar como");
        menuItemGuardarComo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemGuardarComoActionPerformed(evt);
            }
        });
        menuArchivo.add(menuItemGuardarComo);

        menuItemSalir.setText("Salir");
        menuItemSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemSalirActionPerformed(evt);
            }
        });
        menuArchivo.add(menuItemSalir);

        menuBar.add(menuArchivo);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panelHerramientas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(labelImage, javax.swing.GroupLayout.PREFERRED_SIZE, 558, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(874, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelHerramientas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelImage, javax.swing.GroupLayout.PREFERRED_SIZE, 408, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(33, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>                        

    // Este método vacía las listas de las figuras
    private void vaciarListas() {
        lines.clear();
        rectas.clear();
        rectangulos.clear();
        elipses.clear();
    }

    private void pintarImagen() {
        // Se inicializa el objeto BufferedImage para poner la imagen del label, con las medidas del label
        image = new BufferedImage(labelImage.getWidth(), labelImage.getHeight(), BufferedImage.TYPE_INT_RGB);

        // Obtenemos el objeto Graphics2D de la imagen creada
        Graphics2D g2 = image.createGraphics();

        // Dibujamos la imagen actual del label en la imagen creada
        // Esta instrucción dibuja la imagen del label en el objeto Graphics2D "g2"
        labelImage.paint(g2);

        // Dibujar todas los trazos hechos por el pincel en la imagen creada
        g2.setColor(colorPincel);
        g2.setStroke(new BasicStroke(anchoPincel));

        // Utilizamos bucles for-each, especiales para recorrer listas
        // Estos se leen "para cada elemento de la lista lines, dibújalo en g2"
        // Para dibujar los trazos del pincel
        lines.forEach(trazo -> {
            g2.draw(trazo);
        });

        // Para dibujas las líneas rectas
        g2.setColor(colorLinea);
        g2.setStroke(new BasicStroke(anchoLinea));

        rectas.forEach(linea -> {
            g2.draw(linea);
        });

        // Para dibujar los rectángulos
        g2.setColor(colorRect);
        g2.setStroke(new BasicStroke(anchoRect));

        rectangulos.forEach(rect -> {
            g2.draw(rect);
        });

        // Para dibujas las elipses
        g2.setColor(colorCirc);
        g2.setStroke(new BasicStroke(anchoCirc));

        elipses.forEach(circ -> {
            g2.draw(circ);
        });

        g2.dispose();
    }

    // El método abre una imagen con un JFileChoser y la despliega en el label "labelImage"
    private void menuItemAbrirActionPerformed(java.awt.event.ActionEvent evt) {                                              
        // Creamos la instancia del JFileChoser
        JFileChooser fileChooser = new JFileChooser();

        // Le cambiamos el título a la ventana
        fileChooser.setDialogTitle("Seleccione un archivo");

        // Crearemos un filtro para el fileChooser con la clase FileNameExtensionFilter
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("Archivos de imagen", "jpg", "jpeg", "png");
        // Establecemos el filtro 
        fileChooser.setFileFilter(filtro);

        // Lo abrimos en modalidad Open y guardamos el valor de retorno
        int valorRetorno = fileChooser.showOpenDialog(null);

        // Si el valor de retorno corresponde a "approve_option" quiere decir que se seleccionó un archivo
        if (valorRetorno == JFileChooser.APPROVE_OPTION) {
            // Guardamos la ruta seleccionada en un objeto File
            imgFile = fileChooser.getSelectedFile();

            // Creamos un objeto ImageIcon a partir de la ruta seleccionada
            // imgSeleccionada.getAbsolutePath() se refiere a la ruta general del archivo en el file system
            // En este caso, el constructor de imgIcon toma de parámetro la ruta absoluta del archivo
            currentImage = new ImageIcon(imgFile.getAbsolutePath());

            // Creamos un objeto Image para poder manipular la imagen
            // getImage() obtiene la imagen de currentImage
            // getScaledInstance() se usa para escalar la imagen según el ancho y alto del labelImage, el cual es el 
            // elemento en el que desplegaremos la imagen
            Image img = currentImage.getImage().getScaledInstance(labelImage.getWidth(), labelImage.getHeight(), Image.SCALE_SMOOTH);

            // Asignamos la imagen al label
            labelImage.setIcon(new ImageIcon(img));

            // Nota: podemos crear objetos ImageIcon a partir de objetos Image, la cual es otra clase para manipular imágenes
            // Vaciamos las listas de los elementos. Esto permite que no sigan teniendo los mismos elementos luego de abrir un archivo nuev
            vaciarListas();
        }
    }                                             

    private void menuItemSalirActionPerformed(java.awt.event.ActionEvent evt) {                                              
        // Salimos del programa
        System.exit(0);
    }                                             

    // Este método escala la imagen según el ancho y el alto introducido mediante un JOptionPane
    // Al escalar, debemos conservar los dibujos hechos. Tenemos que comprobar que el archivo esté guardado
    // Si está guardado en memoria, pero se hicieron cambios que aún no están guardados mediante el botón de Guardar, hay que avisar
    private void btnEscalarActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // Tenemos que validar los datos. Los datos son inválidos si son menores o iguales a 0, o si exceden determinada cantidad
        // Dicha cantidad depende del tamaño de la interfaz
        // Manejamos la excepción NumberFormatException, la cual ocurre si el usuario introduce algo que no se puede convertir a entero        

        if (image != null && guardado == true) {

            // Límites marcados según el tamaño de la interfaz
            int limiteAncho = 1200;
            int limiteAlto = 720;

            boolean anchoCorrecto = false; // Este booleano es para llevar el control de las excepciones
            int ancho = 0;

            // Para el ancho:
            while (anchoCorrecto != true || ancho <= 0 || ancho > limiteAncho) {
                // Pedimos el ancho y lo guardamos en input
                String input = JOptionPane.showInputDialog("Ingrese el nuevo ancho de la imagen");

                if (input == null) { // Si se presiona "Cancelar" o la "X", finalizamos
                    return;
                }

                try {
                    ancho = Integer.parseInt(input); // Lo intentamos castear a entero

                    if (ancho <= 0 || ancho > limiteAncho) { // Un mensaje para valor no permitidos
                        JOptionPane.showMessageDialog(null, "Valor no permitido para el ancho");
                    }

                    anchoCorrecto = true;
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(null, "Valor numérico inválido");
                    anchoCorrecto = false;
                }
            }

            boolean altoCorrecto = false;
            int alto = 0;

            // Para el alto:
            while (altoCorrecto != true || alto <= 0 || alto > limiteAlto) {
                // Pedimos el alto y lo guardamos en input
                String input = JOptionPane.showInputDialog("Ingrese el nuevo alto de la imagen");

                if (input == null) { // Si se presiona "Cancelar" o la "X", finalizamos
                    return;
                }

                try {
                    alto = Integer.parseInt(input); // Lo intentamos castear a entero

                    if (alto <= 0 || alto > limiteAlto) {
                        JOptionPane.showMessageDialog(null, "Valor no permitido para el alto");
                    }

                    altoCorrecto = true;
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(null, "Valor numérico inválido");
                    altoCorrecto = false;
                }

            }

            // Ya teniendo el ancho y el alto, procedemos a escalar y mostrar la imagen
            // Tenemos que recuperar la imagen que representa nuestro variable de instancia BufferedImage "image"
            ImageIcon icon = new ImageIcon(this.image); // Crea un objeto ImageIcon a partir del BufferedImage
            // Obtiene un objeto Image a partir del ImageIcon para escalarlo
            Image imagenEscalada = icon.getImage().getScaledInstance(ancho, alto, Image.SCALE_SMOOTH);

            // La mostramos en el label
            labelImage.setSize(ancho, alto);
            labelImage.setIcon(new ImageIcon(imagenEscalada));
        }
        else {
            JOptionPane.showMessageDialog(null, "Guarde el archivo para poder modificarlo");
        }
    }                                          

    // Este método guarda los cambios hechos en el archivo, incluidos los dibujos
    private void menuItemGuardarActionPerformed(java.awt.event.ActionEvent evt) {                                                
        // Comprobamos que imgFile ya esté inicializado
        // Al inicio, este método no se puede ejecutar, ya que imgFile solo es inicializado con el método
        // abrir y guardar como
        if (imgFile != null) {
            // Se llama al método para pintar los dibujos hechos y guardar los cambios
            pintarImagen();

            // Guardamos la imagen en el archivo ya existente
            try {
                ImageIO.write(image, "jpg", imgFile);
                JOptionPane.showMessageDialog(this, "Imagen guardada exitosamente");
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Error al guardar archivo");
            }
            
            guardado = true;
        }
    }                                               

    // Este método crea un nuevo archivo con el nombre introducido por el usuario y guarda la imagen en él
    // Igual puede guardar la imagen en un archivo ya existente, usando el mismo nombre del archivo
    private void menuItemGuardarComoActionPerformed(java.awt.event.ActionEvent evt) {                                                    
        // Creamos el JFileChooser
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Guardar el archivo");

        // Creamos un filtro
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("Archivos de imagen", "jpg", "png");
        fileChooser.setFileFilter(filtro);

        int opcion = fileChooser.showSaveDialog(this);

        // Si el usuario pulsó "aceptar"
        if (opcion == JFileChooser.APPROVE_OPTION) {
            // Se obtiene el archivo seleccionado
            imgFile = fileChooser.getSelectedFile();

            // Verificamos si el nombre del archivo ya tiene la extensión ".jpg". Si no la tiene, se la agregamos
            if (!imgFile.getName().endsWith(".jpg")) {
                // Agregamos la extensión ".jpg" al nombre del archivo
                imgFile = new File(imgFile.getAbsolutePath() + ".jpg");
            }

            // Este método contiene todo el código para pintar todos los dibujos en la imagen
            pintarImagen();

            // Guardamos la imagen en el archivo imgFile
            try {
                ImageIO.write(image, "jpg", imgFile);
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Error al guardar archivo");
            }
            
            guardado = true;
        }
    }                                                   

    // Este método pinta con el pincel
    private void btnPintarActionPerformed(java.awt.event.ActionEvent evt) {                                          
        if (evt.getSource() == btnPintar) {
            // Elimina el mouse listener anterior, en caso de que haya uno.
            // Esto es para evitar problemas entre herramientas
            if (currentMouseListener != null) {
                labelImage.removeMouseListener(currentMouseListener);
                labelImage.removeMouseMotionListener(currentMouseListener);
            }

            // Se inicializa el mouse listener del pincel
            // currentMouseListener es la variable de la clase
            currentMouseListener = new MouseAdapter() {
                public void mousePressed(MouseEvent e) {
                    // Guarda la posición del mouse al presionarlo
                    prevPoint = e.getPoint();
                }

                public void mouseDragged(MouseEvent e) {
                    // Dibuja una línea entre la posición actual del mouse y la posición anterior                    
                    Graphics2D g2 = (Graphics2D) labelImage.getGraphics();
                    g2.setStroke(new BasicStroke(anchoPincel)); // establece el ancho de la línea a 5
                    g2.setColor(colorPincel); // establece el color de la línea a rojo

                    // Creamos la línea que se dibujó para poder añadirla a la lista de líneas
                    Line2D line = new Line2D.Double(prevPoint.x, prevPoint.y, e.getX(), e.getY());
                    lines.add(line); // La añadimos a la lista

                    g2.drawLine(prevPoint.x, prevPoint.y, e.getX(), e.getY());
                    prevPoint = e.getPoint(); // actualiza la posición anterior del mouse
                    guardado = false;
                }
            };

            // Se le añade el mouse listener al label
            labelImage.addMouseListener(currentMouseListener);
            labelImage.addMouseMotionListener(currentMouseListener);
        }
    }                                         

    // Este método dibuja líneas rectas
    private void btnLineaActionPerformed(java.awt.event.ActionEvent evt) {                                         
        if (evt.getSource() == btnLinea) {
            // Elimina el mouse listener anterior, en caso de que haya uno.
            if (currentMouseListener != null) {
                labelImage.removeMouseListener(currentMouseListener);
                labelImage.removeMouseMotionListener(currentMouseListener);
            }

            Graphics2D g2d = (Graphics2D) labelImage.getGraphics();
            g2d.setStroke(new BasicStroke(anchoLinea));
            g2d.setColor(colorLinea);

            // Declara el mouse listener de la línea.
            currentMouseListener = new MouseAdapter() {
                @Override
                // cuando el mouse se presiona
                public void mousePressed(MouseEvent e) {
                    // inicializa las coordenadas del primer punto de la línea.
                    x1 = e.getX();
                    y1 = e.getY();
                }

                @Override
                // Cuando se suelta el botón del mouse
                public void mouseReleased(MouseEvent e) {
                    // cuando se suelta el mouse, se toman las coordenadas del otro punto para que este sea el final de la línea.
                    int x2 = e.getX();
                    int y2 = e.getY();

                    // Creamos la línea que se dibujó para poder añadirla a la lista de líneas rectas
                    rectas.add(new Line2D.Double(x1, y1, x2, y2)); // La añadimos a la lista

                    // se dibuja la línea.
                    g2d.drawLine(x1, y1, x2, y2);
                    guardado = false;
                }
            };
            // su respectivo mouse listener :)
            labelImage.addMouseListener(currentMouseListener);
        }
    }                                        

    // Este método es para crear un lienzo en blanco, con las medidas originales, aunque ya se haya puesto una imagen
    private void menuItemNuevoActionPerformed(java.awt.event.ActionEvent evt) {                                              
        // Restablecemos las medidas del label
        labelImage.setSize(anchoLienzo, altoLienzo);

        // El ícono del lienzo en blanco
        ImageIcon icon = new ImageIcon(getClass().getResource("/iconos/white_cover.jpg"));

        // Objeto Image para manipular el icono y hacerlo a las medidas del label
        Image img = icon.getImage().getScaledInstance(labelImage.getWidth(), labelImage.getHeight(), Image.SCALE_SMOOTH);

        // Establecemos el lienzo en blanco como el ícono del label
        labelImage.setIcon(new ImageIcon(img));

        // currentImage pasa a ser la imagen del lienzo
        // Esto es para también poder escalarlo si se quiere
        currentImage = (ImageIcon) labelImage.getIcon();

        vaciarListas();
    }                                             

    // Este método dibuja rectángulos
    private void btnRectanguloActionPerformed(java.awt.event.ActionEvent evt) {                                              
        if (evt.getSource() == btnRectangulo) {
            // elimina el mouse listener anterior, en caso de que haya uno.
            if (currentMouseListener != null) {
                labelImage.removeMouseListener(currentMouseListener);
                labelImage.removeMouseMotionListener(currentMouseListener);
            }

            Graphics2D g2dR = (Graphics2D) labelImage.getGraphics(); // usando g2d se podrán dibujar las figuras.
            g2dR.setColor(colorRect);
            g2dR.setStroke(new BasicStroke(anchoRect));

            // declara el mouse listener para dibujar el rectángulo
            currentMouseListener = new MouseAdapter() {
                @Override
                // cuando el mouse se presiona
                public void mousePressed(MouseEvent e) {
                    // inicializa las coordenadas del primer punto.
                    x1 = e.getX();
                    y1 = e.getY();
                }

                @Override
                // cuando se suelta el mouse, se toman las coordenadas del otro punto para hacer cálculos con ellas
                public void mouseReleased(MouseEvent e) {
                    int x2 = e.getX();
                    int y2 = e.getY();

                    // calcular el ancho y la altura con Math.abs para sacar el valor absoluto.
                    int width = Math.abs(x2 - x1);
                    int height = Math.abs(y2 - y1);

                    // conseguir la esquina superior izquierda del rectángulo con Math.min para devolver el valor más pequeño.
                    int x = Math.min(x1, x2);
                    int y = Math.min(y1, y2);

                    // Añadimos el rectángulo dibujado a la lista
                    rectangulos.add(new Rectangle(x, y, width, height));

                    // dibuja el rectangulo.
                    g2dR.drawRect(x, y, width, height);
                    guardado = false;
                }
            };

            // Se le agrega el mouseListener creado al label.
            labelImage.addMouseListener(currentMouseListener);
        }
    }                                             

    // Este método dibuja elipses
    private void btnCirculoActionPerformed(java.awt.event.ActionEvent evt) {                                           
        if (evt.getSource() == btnCirculo) {
            // elimina el mouse listener anterior, en caso de que haya uno.
            if (currentMouseListener != null) {
                labelImage.removeMouseListener(currentMouseListener);
                labelImage.removeMouseMotionListener(currentMouseListener);
            }

            Graphics2D g2 = (Graphics2D) labelImage.getGraphics(); // usando g2d se podrán dibujar las figuras.
            g2.setColor(colorCirc);
            g2.setStroke(new BasicStroke(anchoCirc));

            // declara el mouse listener para dibujar el círculo
            currentMouseListener = new MouseAdapter() {
                @Override
                // cuando el mouse se presiona
                public void mousePressed(MouseEvent e) {
                    // inicializa las coordenadas del primer punto.
                    x1 = e.getX();
                    y1 = e.getY();
                }

                @Override
                // cuando se suelta el mouse, se toman las coordenadas del otro punto para hacer cálculos con ellas
                public void mouseReleased(MouseEvent e) {
                    int x2 = e.getX();
                    int y2 = e.getY();

                    // calcular el ancho y la altura con Math.abs para sacar el valor absoluto.
                    int width = Math.abs(x2 - x1);
                    int height = Math.abs(y2 - y1);

                    // conseguir la esquina superior izquierda del rectángulo con Math.min para devolver el valor más pequeño.
                    int x = Math.min(x1, x2);
                    int y = Math.min(y1, y2);

                    // Añadimos la elipse dibujaba a la lista
                    elipses.add(new Ellipse2D.Double(x, y, width, height));

                    // dibuja la elipse
                    g2.drawOval(x, y, width, height);
                    guardado = false;
                }
            };

            // Se le agrega el mouseListener creado al label.
            labelImage.addMouseListener(currentMouseListener);
        }
    }                                          

    // Este método restablece la imagen actual para borrar los cambios hechos por las figuras
    // Si el label ya fue escalado, conserva dicho cambio
    private void btnBorrarActionPerformed(java.awt.event.ActionEvent evt) {                                          
        Image img = currentImage.getImage().getScaledInstance(labelImage.getWidth(), labelImage.getHeight(), Image.SCALE_SMOOTH);

        // Asignamos la imagen al label
        labelImage.setIcon(new ImageIcon(img));

        vaciarListas(); // Vaciamos las listas para borrar los elementos añadidos anteriormente
    }                                         

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EditorImagen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EditorImagen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EditorImagen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EditorImagen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EditorImagen().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton btnBorrar;
    private javax.swing.JButton btnCirculo;
    private javax.swing.JButton btnEscalar;
    private javax.swing.JButton btnLinea;
    private javax.swing.JButton btnPintar;
    private javax.swing.JButton btnRectangulo;
    private javax.swing.JLabel labelImage;
    private javax.swing.JMenu menuArchivo;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem menuItemAbrir;
    private javax.swing.JMenuItem menuItemGuardar;
    private javax.swing.JMenuItem menuItemGuardarComo;
    private javax.swing.JMenuItem menuItemNuevo;
    private javax.swing.JMenuItem menuItemSalir;
    private javax.swing.JPanel panelHerramientas;
    // End of variables declaration                   
}
